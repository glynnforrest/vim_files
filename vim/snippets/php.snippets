snippet php
	<?php
	${1}
	?>
snippet phpil
	<?php ${1} ?>
snippet ec
	echo '${1:string}'${2};
	${3}
snippet ech
	echo "${1:string}"${2};
	${3}
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet G
	$GLOBALS['${1:variable}']
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ GET['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
# class
snippet class
	<?php
	namespace ${1:foo};

	/**
	 * ${2:Foo}
	 * @author Glynn Forrest me@glynnforrest.com
	 **/
	class $2 ${3}{

		${4}

		${5:public} function ${6:__construct}(${7}) {
			${8:// magic}
		}
	}
	?>
# interface
snippet interface
	<?php
	namespace ${1:foo};

	/**
	 * ${2:Foo}
	 * @author Glynn Forrest me@glynnforrest.com
	 **/
	interface $2 ${3}{

		${4}

		${5:public} function ${6:__construct}(${7}) {
			${8:// magic}
		}
	}
	?>
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${3:// code...}
	}
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${4:// code...}
	}
snippet fun
	${1:public} function ${2:name}(${3}) {
		${4:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
snippet try
	try {
		${2}
	} catch (${1:\Exception} $e) {
		${3}
	}
# lambda with closure
snippet lambda
	${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
		${4}
	};
# pre_print();
snippet pp
	echo '<pre>'; print_r(${1}); echo '</pre>';
# pre_dump();
snippet pd
	echo '<pre>'; var_dump(${1}); echo '</pre>';
# pre_dump(); die();
snippet pdd
	echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${2:});
snippet vd
	var_dump(${1});
snippet vdd
	var_dump(${1}); die(${2:});
snippet retf
	return false;
snippet rett
	return true;
#PLL specific snippets
snippet contr
	<?php
	namespace ${1:app}\controller;

	use pll\controller\Controller;
	use pll\view\View;

	/**
	 * ${2:Foo}Controller
	 * @author Glynn Forrest me@glynnforrest.com
	 **/
	class $2Controller extends Controller {

		${3:public} function ${4:index}(${5}) {
			${6:// magic}
		}
	}
	?>
snippet model
	<?php
	namespace ${1:app}\model;

	use pll\model\DatabaseModel;

	/**
	 * ${2:Foo}Model
	 * @author Glynn Forrest me@glynnforrest.com
	 **/
	class $2Model extends DatabaseModel {

		protected $table = '${3:table}';
		protected $fields = array(${4});
		protected $rules = array(${5});
		
		${6:// magic}
	}
	?>
snippet index
	<?php
	namespace ${1:app};

	use pll\core\Loader;
	use pll\core\PLL;
	use pll\core\Config;
	use pll\log\Logger;
	use pll\error\ErrorHandler;
	use pll\error\ErrorDebugger;
	use pll\error\ErrorRedirect;
	use pll\core\Dispatcher;

	//include PLL bootstrap
	require('${2:/path/to/bootstrap.php}');
	//add this application's namespace to Loader.
	Loader::addNamespace('$1','${3:/path/to/application}');
	//enable logging
	PLL::enableLogs();

	if ($_SERVER['SERVER_ADDR'] == '127.0.0.1') {
		//development settings
		//load application config file.
		Config::load('${4:config/devconfig.php}');
		//set ErrorHandler behaviour
		$err = ErrorHandler::getInstance();
		$err->attachObserver(Logger::getInstance());
		$err->attachObserver(new ErrorDebugger(ErrorDebugger::ACTION_GENERATE_HTML_PAGE));
	} else {
		//production settings
		//load application config file.
		Config::load('${5:config/prodconfig.php}');
		//set ErrorHandler behaviour
		$err = ErrorHandler::getInstance();
		$err->attachObserver(Logger::getInstance());
		$err->attachObserver(new ErrorRedirect('/404'));
	}

	$d = new Dispatcher();
	$d->globals(array(
		 'transforms' => array(
			  'controller' => function($controller) {
				  return '$1\\controller\\' . ucfirst($controller) . 'Controller';
			  }
		 )
	));
	$d->rule('/:controller(/:function(/:args))', array(
		 'function' => '${6:index}'
	));
	$d->rule('/', array(
		 'controller' => '${7:controller}',
		 'function' => '${8:index}'
	));
	$d->rule('.*', array(
		 'controller' => '${9:controller}',
		 'function' => '${10:index}'
	));${11}
	$d->go();
	?>
snippet config
	<?php

	return array(
		'database' => array(
			'${1}' => array(
				'driver' => '${2:mysql}',
				'host' => '${3:localhost}',
				'port' => '${4:3306}',
				'user' => '${5}',
				'pass' => '${6}',
				'database' => '${7}',
			)
		),
		'log' => array(
			'type' => array(
				'fatal' => true,
				'warn' => true,
				'debug' => false,
			),
			'path' => '${8}',
			'name' => '${9:logs.log}',
		),
		'cache' => array(
			'${10}' => array(
				'host' => '${11:localhost}',
				'driver' => '${12:memcached}',
				'port' => '${13:11211}'
			)
		)${14}
	);
	?>
